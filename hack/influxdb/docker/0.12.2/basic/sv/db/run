#!/bin/bash
exec 1> >(logger -s -p daemon.info -t ${PWD##*/})
exec 2> >(logger -s -p daemon.error -t ${PWD##*/})
source /etc/envvars
echo "Starting Db..."

sv start influxd || exit 1

set -o nounset
set -o pipefail

BACKUP_PATH="$PVROOT/influxdb-backup"

start() {
    sv start influxd
}
stop() {
    sv stop influxd
}

setup_boto(){
    cat <<-EOF >> "/root/.boto"
[Credentials]
gs_service_key_file = /var/credentials/gce

[Boto]
https_validate_certificates = True

[GSUtil]
content_language = en
default_api_version = 2
default_project_id = $project
EOF
    chmod +x /root/.boto
}

setup_aws() {
    mkdir -p /root/.aws
    ACCESS_KEY=`cat /var/credentials/aws/keyid`
    SECRET_KEY=`cat /var/credentials/aws/secret`
    cat <<-EOF >> "/root/.aws/credentials"
[default]
aws_access_key_id = $ACCESS_KEY
aws_secret_access_key = $SECRET_KEY
EOF
    chmod +x /root/.aws/credentials
}

pull() {
    mkdir $BACKUP_PATH
    if [ "$cloud" = 'gce' ]; then
        setup_boto
        gsutil -m cp -r gs://"$bucket"/"$database"/"$snapshot" $BACKUP_PATH
        retval=$?
        if [ "$retval" -ne 0 ]; then
            touch /var/pv/create-status/fail
            exit 1
        fi
    fi
    if [ "$cloud" = 'aws' ]; then
        setup_aws
        chmod +x /root/.aws/credentials
        region=$(aws s3api get-bucket-location --bucket=$bucket --output=text)
        if [ $region = "None" ]; then
            aws s3 cp --recursive s3://"$bucket"/"$database"/"$snapshot" $BACKUP_PATH
        else
            aws s3 cp --region $region --recursive s3://"$bucket"/"$database"/"$snapshot" $BACKUP_PATH
        fi
        retval=$?
        if [ "$retval" -ne 0 ]; then
            touch /var/pv/create-status/fail
            exit 1
        fi
    fi
}

restore_data() {
    SNAPSHOT_PATH="$BACKUP_PATH/$snapshot"
    influxd restore -metadir $DBROOT/meta -datadir $DBROOT/data -database "$1"  $SNAPSHOT_PATH
    retval=$?
    if [ "$retval" -ne 0 ]; then
        touch /var/pv/create-status/fail
        exit 1
    fi
}

restore_db(){
    FS=$'\n'
    for next in `cat "$BACKUP_PATH/$snapshot"/db-list.txt`
    do
        restore_data $next
    done
}

create(){
    if [ -f '/srv/influxdb/secrets/.admin' ]; then
        export $(cat /srv/influxdb/secrets/.admin | xargs)
    else
        echo
        echo 'Missing environment file /srv/influxdb/secrets/.admin.'
        echo
        exit 1
    fi

    # use local influxdb
    INFLUX_HOST=127.0.0.1
    INFLUX_API_PORT=8086
    if [ -n "${INFLUX_ADMIN_USER}" ]; then
            influx -host ${INFLUX_HOST} -port ${INFLUX_API_PORT} -execute "CREATE USER ${INFLUX_ADMIN_USER} WITH PASSWORD '${INFLUX_ADMIN_PASSWORD}' WITH ALL PRIVILEGES"
            retval=$?
            if [ "$retval" -ne 0 ]; then
                exit 1
            fi
    fi
}

process_type=${process:-default}
if [ "$process_type" = 'restore' ]; then
    mkdir -p /var/pv/create-status
    if [ -f '/var/pv/create-status/success' ]; then
        start
        echo "Database is started with previous data"
    else
        stop
        pull
        restore_db
        start
        echo "Database is restored"
	fi
    touch /var/pv/create-status/success
    rm -rf $BACKUP_PATH
else
    mkdir -p /var/pv/create-status
    if [ -f '/var/pv/create-status/success' ]; then
        echo "Database is started with previous data"
    else
        create
        echo "Database is created"
	fi
    touch /var/pv/create-status/success
fi

rm -rf /etc/service/db
echo "Database and users created.."
echo "Service deleted...."
